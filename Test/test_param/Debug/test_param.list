
test_param.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000728  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  080007e8  080007e8  00020004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  080007e8  080007e8  00020004  2**0
                  CONTENTS
  4 .ARM          00000000  080007e8  080007e8  00020004  2**0
                  CONTENTS
  5 .preinit_array 00000000  080007e8  080007e8  00020004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080007e8  080007e8  000107e8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080007ec  080007ec  000107ec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000004  20000000  080007f0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000001c  20000004  080007f4  00020004  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000020  080007f4  00020020  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020004  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002002c  2**0
                  CONTENTS, READONLY
 13 .debug_info   000014a1  00000000  00000000  0002006f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00000657  00000000  00000000  00021510  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000248  00000000  00000000  00021b68  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000001a5  00000000  00000000  00021db0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0000a004  00000000  00000000  00021f55  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00001f75  00000000  00000000  0002bf59  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00035f70  00000000  00000000  0002dece  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00000720  00000000  00000000  00063e40  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005b  00000000  00000000  00064560  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000004 	.word	0x20000004
 80000e0:	00000000 	.word	0x00000000
 80000e4:	080007d0 	.word	0x080007d0

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000008 	.word	0x20000008
 8000104:	080007d0 	.word	0x080007d0

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000220:	b590      	push	{r4, r7, lr}
 8000222:	b083      	sub	sp, #12
 8000224:	af00      	add	r7, sp, #0
 8000226:	0002      	movs	r2, r0
 8000228:	6039      	str	r1, [r7, #0]
 800022a:	1dfb      	adds	r3, r7, #7
 800022c:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800022e:	1dfb      	adds	r3, r7, #7
 8000230:	781b      	ldrb	r3, [r3, #0]
 8000232:	2b7f      	cmp	r3, #127	; 0x7f
 8000234:	d828      	bhi.n	8000288 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000236:	4a2f      	ldr	r2, [pc, #188]	; (80002f4 <__NVIC_SetPriority+0xd4>)
 8000238:	1dfb      	adds	r3, r7, #7
 800023a:	781b      	ldrb	r3, [r3, #0]
 800023c:	b25b      	sxtb	r3, r3
 800023e:	089b      	lsrs	r3, r3, #2
 8000240:	33c0      	adds	r3, #192	; 0xc0
 8000242:	009b      	lsls	r3, r3, #2
 8000244:	589b      	ldr	r3, [r3, r2]
 8000246:	1dfa      	adds	r2, r7, #7
 8000248:	7812      	ldrb	r2, [r2, #0]
 800024a:	0011      	movs	r1, r2
 800024c:	2203      	movs	r2, #3
 800024e:	400a      	ands	r2, r1
 8000250:	00d2      	lsls	r2, r2, #3
 8000252:	21ff      	movs	r1, #255	; 0xff
 8000254:	4091      	lsls	r1, r2
 8000256:	000a      	movs	r2, r1
 8000258:	43d2      	mvns	r2, r2
 800025a:	401a      	ands	r2, r3
 800025c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800025e:	683b      	ldr	r3, [r7, #0]
 8000260:	019b      	lsls	r3, r3, #6
 8000262:	22ff      	movs	r2, #255	; 0xff
 8000264:	401a      	ands	r2, r3
 8000266:	1dfb      	adds	r3, r7, #7
 8000268:	781b      	ldrb	r3, [r3, #0]
 800026a:	0018      	movs	r0, r3
 800026c:	2303      	movs	r3, #3
 800026e:	4003      	ands	r3, r0
 8000270:	00db      	lsls	r3, r3, #3
 8000272:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000274:	481f      	ldr	r0, [pc, #124]	; (80002f4 <__NVIC_SetPriority+0xd4>)
 8000276:	1dfb      	adds	r3, r7, #7
 8000278:	781b      	ldrb	r3, [r3, #0]
 800027a:	b25b      	sxtb	r3, r3
 800027c:	089b      	lsrs	r3, r3, #2
 800027e:	430a      	orrs	r2, r1
 8000280:	33c0      	adds	r3, #192	; 0xc0
 8000282:	009b      	lsls	r3, r3, #2
 8000284:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8000286:	e031      	b.n	80002ec <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000288:	4a1b      	ldr	r2, [pc, #108]	; (80002f8 <__NVIC_SetPriority+0xd8>)
 800028a:	1dfb      	adds	r3, r7, #7
 800028c:	781b      	ldrb	r3, [r3, #0]
 800028e:	0019      	movs	r1, r3
 8000290:	230f      	movs	r3, #15
 8000292:	400b      	ands	r3, r1
 8000294:	3b08      	subs	r3, #8
 8000296:	089b      	lsrs	r3, r3, #2
 8000298:	3306      	adds	r3, #6
 800029a:	009b      	lsls	r3, r3, #2
 800029c:	18d3      	adds	r3, r2, r3
 800029e:	3304      	adds	r3, #4
 80002a0:	681b      	ldr	r3, [r3, #0]
 80002a2:	1dfa      	adds	r2, r7, #7
 80002a4:	7812      	ldrb	r2, [r2, #0]
 80002a6:	0011      	movs	r1, r2
 80002a8:	2203      	movs	r2, #3
 80002aa:	400a      	ands	r2, r1
 80002ac:	00d2      	lsls	r2, r2, #3
 80002ae:	21ff      	movs	r1, #255	; 0xff
 80002b0:	4091      	lsls	r1, r2
 80002b2:	000a      	movs	r2, r1
 80002b4:	43d2      	mvns	r2, r2
 80002b6:	401a      	ands	r2, r3
 80002b8:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80002ba:	683b      	ldr	r3, [r7, #0]
 80002bc:	019b      	lsls	r3, r3, #6
 80002be:	22ff      	movs	r2, #255	; 0xff
 80002c0:	401a      	ands	r2, r3
 80002c2:	1dfb      	adds	r3, r7, #7
 80002c4:	781b      	ldrb	r3, [r3, #0]
 80002c6:	0018      	movs	r0, r3
 80002c8:	2303      	movs	r3, #3
 80002ca:	4003      	ands	r3, r0
 80002cc:	00db      	lsls	r3, r3, #3
 80002ce:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80002d0:	4809      	ldr	r0, [pc, #36]	; (80002f8 <__NVIC_SetPriority+0xd8>)
 80002d2:	1dfb      	adds	r3, r7, #7
 80002d4:	781b      	ldrb	r3, [r3, #0]
 80002d6:	001c      	movs	r4, r3
 80002d8:	230f      	movs	r3, #15
 80002da:	4023      	ands	r3, r4
 80002dc:	3b08      	subs	r3, #8
 80002de:	089b      	lsrs	r3, r3, #2
 80002e0:	430a      	orrs	r2, r1
 80002e2:	3306      	adds	r3, #6
 80002e4:	009b      	lsls	r3, r3, #2
 80002e6:	18c3      	adds	r3, r0, r3
 80002e8:	3304      	adds	r3, #4
 80002ea:	601a      	str	r2, [r3, #0]
}
 80002ec:	46c0      	nop			; (mov r8, r8)
 80002ee:	46bd      	mov	sp, r7
 80002f0:	b003      	add	sp, #12
 80002f2:	bd90      	pop	{r4, r7, pc}
 80002f4:	e000e100 	.word	0xe000e100
 80002f8:	e000ed00 	.word	0xe000ed00

080002fc <LL_RCC_HSI_Enable>:
  * @brief  Enable HSI oscillator
  * @rmtoll CR           HSION         LL_RCC_HSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_Enable(void)
{
 80002fc:	b580      	push	{r7, lr}
 80002fe:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8000300:	4b04      	ldr	r3, [pc, #16]	; (8000314 <LL_RCC_HSI_Enable+0x18>)
 8000302:	681a      	ldr	r2, [r3, #0]
 8000304:	4b03      	ldr	r3, [pc, #12]	; (8000314 <LL_RCC_HSI_Enable+0x18>)
 8000306:	2101      	movs	r1, #1
 8000308:	430a      	orrs	r2, r1
 800030a:	601a      	str	r2, [r3, #0]
}
 800030c:	46c0      	nop			; (mov r8, r8)
 800030e:	46bd      	mov	sp, r7
 8000310:	bd80      	pop	{r7, pc}
 8000312:	46c0      	nop			; (mov r8, r8)
 8000314:	40021000 	.word	0x40021000

08000318 <LL_RCC_HSI_IsReady>:
  * @brief  Check if HSI clock is ready
  * @rmtoll CR           HSIRDY        LL_RCC_HSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI_IsReady(void)
{
 8000318:	b580      	push	{r7, lr}
 800031a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == RCC_CR_HSIRDY) ? 1UL : 0UL);
 800031c:	4b05      	ldr	r3, [pc, #20]	; (8000334 <LL_RCC_HSI_IsReady+0x1c>)
 800031e:	681b      	ldr	r3, [r3, #0]
 8000320:	2204      	movs	r2, #4
 8000322:	4013      	ands	r3, r2
 8000324:	2b04      	cmp	r3, #4
 8000326:	d101      	bne.n	800032c <LL_RCC_HSI_IsReady+0x14>
 8000328:	2301      	movs	r3, #1
 800032a:	e000      	b.n	800032e <LL_RCC_HSI_IsReady+0x16>
 800032c:	2300      	movs	r3, #0
}
 800032e:	0018      	movs	r0, r3
 8000330:	46bd      	mov	sp, r7
 8000332:	bd80      	pop	{r7, pc}
 8000334:	40021000 	.word	0x40021000

08000338 <LL_RCC_HSI_SetCalibTrimming>:
  * @rmtoll ICSCR        HSITRIM       LL_RCC_HSI_SetCalibTrimming
  * @param  Value between Min_Data = 0x00 and Max_Data = 0x1F
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_SetCalibTrimming(uint32_t Value)
{
 8000338:	b580      	push	{r7, lr}
 800033a:	b082      	sub	sp, #8
 800033c:	af00      	add	r7, sp, #0
 800033e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 8000340:	4b06      	ldr	r3, [pc, #24]	; (800035c <LL_RCC_HSI_SetCalibTrimming+0x24>)
 8000342:	685b      	ldr	r3, [r3, #4]
 8000344:	4a06      	ldr	r2, [pc, #24]	; (8000360 <LL_RCC_HSI_SetCalibTrimming+0x28>)
 8000346:	4013      	ands	r3, r2
 8000348:	0019      	movs	r1, r3
 800034a:	687b      	ldr	r3, [r7, #4]
 800034c:	021a      	lsls	r2, r3, #8
 800034e:	4b03      	ldr	r3, [pc, #12]	; (800035c <LL_RCC_HSI_SetCalibTrimming+0x24>)
 8000350:	430a      	orrs	r2, r1
 8000352:	605a      	str	r2, [r3, #4]
}
 8000354:	46c0      	nop			; (mov r8, r8)
 8000356:	46bd      	mov	sp, r7
 8000358:	b002      	add	sp, #8
 800035a:	bd80      	pop	{r7, pc}
 800035c:	40021000 	.word	0x40021000
 8000360:	ffffe0ff 	.word	0xffffe0ff

08000364 <LL_RCC_SetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_PLL
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 8000364:	b580      	push	{r7, lr}
 8000366:	b082      	sub	sp, #8
 8000368:	af00      	add	r7, sp, #0
 800036a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 800036c:	4b06      	ldr	r3, [pc, #24]	; (8000388 <LL_RCC_SetSysClkSource+0x24>)
 800036e:	68db      	ldr	r3, [r3, #12]
 8000370:	2203      	movs	r2, #3
 8000372:	4393      	bics	r3, r2
 8000374:	0019      	movs	r1, r3
 8000376:	4b04      	ldr	r3, [pc, #16]	; (8000388 <LL_RCC_SetSysClkSource+0x24>)
 8000378:	687a      	ldr	r2, [r7, #4]
 800037a:	430a      	orrs	r2, r1
 800037c:	60da      	str	r2, [r3, #12]
}
 800037e:	46c0      	nop			; (mov r8, r8)
 8000380:	46bd      	mov	sp, r7
 8000382:	b002      	add	sp, #8
 8000384:	bd80      	pop	{r7, pc}
 8000386:	46c0      	nop			; (mov r8, r8)
 8000388:	40021000 	.word	0x40021000

0800038c <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 800038c:	b580      	push	{r7, lr}
 800038e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8000390:	4b03      	ldr	r3, [pc, #12]	; (80003a0 <LL_RCC_GetSysClkSource+0x14>)
 8000392:	68db      	ldr	r3, [r3, #12]
 8000394:	220c      	movs	r2, #12
 8000396:	4013      	ands	r3, r2
}
 8000398:	0018      	movs	r0, r3
 800039a:	46bd      	mov	sp, r7
 800039c:	bd80      	pop	{r7, pc}
 800039e:	46c0      	nop			; (mov r8, r8)
 80003a0:	40021000 	.word	0x40021000

080003a4 <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 80003a4:	b580      	push	{r7, lr}
 80003a6:	b082      	sub	sp, #8
 80003a8:	af00      	add	r7, sp, #0
 80003aa:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 80003ac:	4b06      	ldr	r3, [pc, #24]	; (80003c8 <LL_RCC_SetAHBPrescaler+0x24>)
 80003ae:	68db      	ldr	r3, [r3, #12]
 80003b0:	22f0      	movs	r2, #240	; 0xf0
 80003b2:	4393      	bics	r3, r2
 80003b4:	0019      	movs	r1, r3
 80003b6:	4b04      	ldr	r3, [pc, #16]	; (80003c8 <LL_RCC_SetAHBPrescaler+0x24>)
 80003b8:	687a      	ldr	r2, [r7, #4]
 80003ba:	430a      	orrs	r2, r1
 80003bc:	60da      	str	r2, [r3, #12]
}
 80003be:	46c0      	nop			; (mov r8, r8)
 80003c0:	46bd      	mov	sp, r7
 80003c2:	b002      	add	sp, #8
 80003c4:	bd80      	pop	{r7, pc}
 80003c6:	46c0      	nop			; (mov r8, r8)
 80003c8:	40021000 	.word	0x40021000

080003cc <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 80003cc:	b580      	push	{r7, lr}
 80003ce:	b082      	sub	sp, #8
 80003d0:	af00      	add	r7, sp, #0
 80003d2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 80003d4:	4b06      	ldr	r3, [pc, #24]	; (80003f0 <LL_RCC_SetAPB1Prescaler+0x24>)
 80003d6:	68db      	ldr	r3, [r3, #12]
 80003d8:	4a06      	ldr	r2, [pc, #24]	; (80003f4 <LL_RCC_SetAPB1Prescaler+0x28>)
 80003da:	4013      	ands	r3, r2
 80003dc:	0019      	movs	r1, r3
 80003de:	4b04      	ldr	r3, [pc, #16]	; (80003f0 <LL_RCC_SetAPB1Prescaler+0x24>)
 80003e0:	687a      	ldr	r2, [r7, #4]
 80003e2:	430a      	orrs	r2, r1
 80003e4:	60da      	str	r2, [r3, #12]
}
 80003e6:	46c0      	nop			; (mov r8, r8)
 80003e8:	46bd      	mov	sp, r7
 80003ea:	b002      	add	sp, #8
 80003ec:	bd80      	pop	{r7, pc}
 80003ee:	46c0      	nop			; (mov r8, r8)
 80003f0:	40021000 	.word	0x40021000
 80003f4:	fffff8ff 	.word	0xfffff8ff

080003f8 <LL_RCC_SetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB2Prescaler(uint32_t Prescaler)
{
 80003f8:	b580      	push	{r7, lr}
 80003fa:	b082      	sub	sp, #8
 80003fc:	af00      	add	r7, sp, #0
 80003fe:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8000400:	4b06      	ldr	r3, [pc, #24]	; (800041c <LL_RCC_SetAPB2Prescaler+0x24>)
 8000402:	68db      	ldr	r3, [r3, #12]
 8000404:	4a06      	ldr	r2, [pc, #24]	; (8000420 <LL_RCC_SetAPB2Prescaler+0x28>)
 8000406:	4013      	ands	r3, r2
 8000408:	0019      	movs	r1, r3
 800040a:	4b04      	ldr	r3, [pc, #16]	; (800041c <LL_RCC_SetAPB2Prescaler+0x24>)
 800040c:	687a      	ldr	r2, [r7, #4]
 800040e:	430a      	orrs	r2, r1
 8000410:	60da      	str	r2, [r3, #12]
}
 8000412:	46c0      	nop			; (mov r8, r8)
 8000414:	46bd      	mov	sp, r7
 8000416:	b002      	add	sp, #8
 8000418:	bd80      	pop	{r7, pc}
 800041a:	46c0      	nop			; (mov r8, r8)
 800041c:	40021000 	.word	0x40021000
 8000420:	ffffc7ff 	.word	0xffffc7ff

08000424 <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 8000424:	b580      	push	{r7, lr}
 8000426:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 8000428:	4b04      	ldr	r3, [pc, #16]	; (800043c <LL_RCC_PLL_Enable+0x18>)
 800042a:	681a      	ldr	r2, [r3, #0]
 800042c:	4b03      	ldr	r3, [pc, #12]	; (800043c <LL_RCC_PLL_Enable+0x18>)
 800042e:	2180      	movs	r1, #128	; 0x80
 8000430:	0449      	lsls	r1, r1, #17
 8000432:	430a      	orrs	r2, r1
 8000434:	601a      	str	r2, [r3, #0]
}
 8000436:	46c0      	nop			; (mov r8, r8)
 8000438:	46bd      	mov	sp, r7
 800043a:	bd80      	pop	{r7, pc}
 800043c:	40021000 	.word	0x40021000

08000440 <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 8000440:	b580      	push	{r7, lr}
 8000442:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == RCC_CR_PLLRDY) ? 1UL : 0UL);
 8000444:	4b07      	ldr	r3, [pc, #28]	; (8000464 <LL_RCC_PLL_IsReady+0x24>)
 8000446:	681a      	ldr	r2, [r3, #0]
 8000448:	2380      	movs	r3, #128	; 0x80
 800044a:	049b      	lsls	r3, r3, #18
 800044c:	401a      	ands	r2, r3
 800044e:	2380      	movs	r3, #128	; 0x80
 8000450:	049b      	lsls	r3, r3, #18
 8000452:	429a      	cmp	r2, r3
 8000454:	d101      	bne.n	800045a <LL_RCC_PLL_IsReady+0x1a>
 8000456:	2301      	movs	r3, #1
 8000458:	e000      	b.n	800045c <LL_RCC_PLL_IsReady+0x1c>
 800045a:	2300      	movs	r3, #0
}
 800045c:	0018      	movs	r0, r3
 800045e:	46bd      	mov	sp, r7
 8000460:	bd80      	pop	{r7, pc}
 8000462:	46c0      	nop			; (mov r8, r8)
 8000464:	40021000 	.word	0x40021000

08000468 <LL_RCC_PLL_ConfigDomain_SYS>:
  *         @arg @ref LL_RCC_PLL_DIV_3
  *         @arg @ref LL_RCC_PLL_DIV_4
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_ConfigDomain_SYS(uint32_t Source, uint32_t PLLMul, uint32_t PLLDiv)
{
 8000468:	b580      	push	{r7, lr}
 800046a:	b084      	sub	sp, #16
 800046c:	af00      	add	r7, sp, #0
 800046e:	60f8      	str	r0, [r7, #12]
 8000470:	60b9      	str	r1, [r7, #8]
 8000472:	607a      	str	r2, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PLLSRC | RCC_CFGR_PLLMUL | RCC_CFGR_PLLDIV, Source | PLLMul | PLLDiv);
 8000474:	4b08      	ldr	r3, [pc, #32]	; (8000498 <LL_RCC_PLL_ConfigDomain_SYS+0x30>)
 8000476:	68db      	ldr	r3, [r3, #12]
 8000478:	4a08      	ldr	r2, [pc, #32]	; (800049c <LL_RCC_PLL_ConfigDomain_SYS+0x34>)
 800047a:	4013      	ands	r3, r2
 800047c:	0019      	movs	r1, r3
 800047e:	68fa      	ldr	r2, [r7, #12]
 8000480:	68bb      	ldr	r3, [r7, #8]
 8000482:	431a      	orrs	r2, r3
 8000484:	687b      	ldr	r3, [r7, #4]
 8000486:	431a      	orrs	r2, r3
 8000488:	4b03      	ldr	r3, [pc, #12]	; (8000498 <LL_RCC_PLL_ConfigDomain_SYS+0x30>)
 800048a:	430a      	orrs	r2, r1
 800048c:	60da      	str	r2, [r3, #12]
}
 800048e:	46c0      	nop			; (mov r8, r8)
 8000490:	46bd      	mov	sp, r7
 8000492:	b004      	add	sp, #16
 8000494:	bd80      	pop	{r7, pc}
 8000496:	46c0      	nop			; (mov r8, r8)
 8000498:	40021000 	.word	0x40021000
 800049c:	ff02ffff 	.word	0xff02ffff

080004a0 <LL_APB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 80004a0:	b580      	push	{r7, lr}
 80004a2:	b084      	sub	sp, #16
 80004a4:	af00      	add	r7, sp, #0
 80004a6:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR, Periphs);
 80004a8:	4b07      	ldr	r3, [pc, #28]	; (80004c8 <LL_APB1_GRP1_EnableClock+0x28>)
 80004aa:	6b99      	ldr	r1, [r3, #56]	; 0x38
 80004ac:	4b06      	ldr	r3, [pc, #24]	; (80004c8 <LL_APB1_GRP1_EnableClock+0x28>)
 80004ae:	687a      	ldr	r2, [r7, #4]
 80004b0:	430a      	orrs	r2, r1
 80004b2:	639a      	str	r2, [r3, #56]	; 0x38
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 80004b4:	4b04      	ldr	r3, [pc, #16]	; (80004c8 <LL_APB1_GRP1_EnableClock+0x28>)
 80004b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80004b8:	687a      	ldr	r2, [r7, #4]
 80004ba:	4013      	ands	r3, r2
 80004bc:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80004be:	68fb      	ldr	r3, [r7, #12]
}
 80004c0:	46c0      	nop			; (mov r8, r8)
 80004c2:	46bd      	mov	sp, r7
 80004c4:	b004      	add	sp, #16
 80004c6:	bd80      	pop	{r7, pc}
 80004c8:	40021000 	.word	0x40021000

080004cc <LL_APB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 80004cc:	b580      	push	{r7, lr}
 80004ce:	b084      	sub	sp, #16
 80004d0:	af00      	add	r7, sp, #0
 80004d2:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 80004d4:	4b07      	ldr	r3, [pc, #28]	; (80004f4 <LL_APB2_GRP1_EnableClock+0x28>)
 80004d6:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80004d8:	4b06      	ldr	r3, [pc, #24]	; (80004f4 <LL_APB2_GRP1_EnableClock+0x28>)
 80004da:	687a      	ldr	r2, [r7, #4]
 80004dc:	430a      	orrs	r2, r1
 80004de:	635a      	str	r2, [r3, #52]	; 0x34
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 80004e0:	4b04      	ldr	r3, [pc, #16]	; (80004f4 <LL_APB2_GRP1_EnableClock+0x28>)
 80004e2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80004e4:	687a      	ldr	r2, [r7, #4]
 80004e6:	4013      	ands	r3, r2
 80004e8:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80004ea:	68fb      	ldr	r3, [r7, #12]
}
 80004ec:	46c0      	nop			; (mov r8, r8)
 80004ee:	46bd      	mov	sp, r7
 80004f0:	b004      	add	sp, #16
 80004f2:	bd80      	pop	{r7, pc}
 80004f4:	40021000 	.word	0x40021000

080004f8 <LL_IOP_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_IOP_GRP1_EnableClock(uint32_t Periphs)
{
 80004f8:	b580      	push	{r7, lr}
 80004fa:	b084      	sub	sp, #16
 80004fc:	af00      	add	r7, sp, #0
 80004fe:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->IOPENR, Periphs);
 8000500:	4b07      	ldr	r3, [pc, #28]	; (8000520 <LL_IOP_GRP1_EnableClock+0x28>)
 8000502:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8000504:	4b06      	ldr	r3, [pc, #24]	; (8000520 <LL_IOP_GRP1_EnableClock+0x28>)
 8000506:	687a      	ldr	r2, [r7, #4]
 8000508:	430a      	orrs	r2, r1
 800050a:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->IOPENR, Periphs);
 800050c:	4b04      	ldr	r3, [pc, #16]	; (8000520 <LL_IOP_GRP1_EnableClock+0x28>)
 800050e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000510:	687a      	ldr	r2, [r7, #4]
 8000512:	4013      	ands	r3, r2
 8000514:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000516:	68fb      	ldr	r3, [r7, #12]
}
 8000518:	46c0      	nop			; (mov r8, r8)
 800051a:	46bd      	mov	sp, r7
 800051c:	b004      	add	sp, #16
 800051e:	bd80      	pop	{r7, pc}
 8000520:	40021000 	.word	0x40021000

08000524 <LL_FLASH_SetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_0
  *         @arg @ref LL_FLASH_LATENCY_1
  * @retval None
  */
__STATIC_INLINE void LL_FLASH_SetLatency(uint32_t Latency)
{
 8000524:	b580      	push	{r7, lr}
 8000526:	b082      	sub	sp, #8
 8000528:	af00      	add	r7, sp, #0
 800052a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, Latency);
 800052c:	4b06      	ldr	r3, [pc, #24]	; (8000548 <LL_FLASH_SetLatency+0x24>)
 800052e:	681b      	ldr	r3, [r3, #0]
 8000530:	2201      	movs	r2, #1
 8000532:	4393      	bics	r3, r2
 8000534:	0019      	movs	r1, r3
 8000536:	4b04      	ldr	r3, [pc, #16]	; (8000548 <LL_FLASH_SetLatency+0x24>)
 8000538:	687a      	ldr	r2, [r7, #4]
 800053a:	430a      	orrs	r2, r1
 800053c:	601a      	str	r2, [r3, #0]
}
 800053e:	46c0      	nop			; (mov r8, r8)
 8000540:	46bd      	mov	sp, r7
 8000542:	b002      	add	sp, #8
 8000544:	bd80      	pop	{r7, pc}
 8000546:	46c0      	nop			; (mov r8, r8)
 8000548:	40022000 	.word	0x40022000

0800054c <LL_FLASH_GetLatency>:
  * @retval Returned value can be one of the following values:
  *         @arg @ref LL_FLASH_LATENCY_0
  *         @arg @ref LL_FLASH_LATENCY_1
  */
__STATIC_INLINE uint32_t LL_FLASH_GetLatency(void)
{
 800054c:	b580      	push	{r7, lr}
 800054e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(FLASH->ACR, FLASH_ACR_LATENCY));
 8000550:	4b03      	ldr	r3, [pc, #12]	; (8000560 <LL_FLASH_GetLatency+0x14>)
 8000552:	681b      	ldr	r3, [r3, #0]
 8000554:	2201      	movs	r2, #1
 8000556:	4013      	ands	r3, r2
}
 8000558:	0018      	movs	r0, r3
 800055a:	46bd      	mov	sp, r7
 800055c:	bd80      	pop	{r7, pc}
 800055e:	46c0      	nop			; (mov r8, r8)
 8000560:	40022000 	.word	0x40022000

08000564 <LL_PWR_SetRegulVoltageScaling>:
  *         @arg @ref LL_PWR_REGU_VOLTAGE_SCALE2
  *         @arg @ref LL_PWR_REGU_VOLTAGE_SCALE3
  * @retval None
  */
__STATIC_INLINE void LL_PWR_SetRegulVoltageScaling(uint32_t VoltageScaling)
{
 8000564:	b580      	push	{r7, lr}
 8000566:	b082      	sub	sp, #8
 8000568:	af00      	add	r7, sp, #0
 800056a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(PWR->CR, PWR_CR_VOS, VoltageScaling);
 800056c:	4b06      	ldr	r3, [pc, #24]	; (8000588 <LL_PWR_SetRegulVoltageScaling+0x24>)
 800056e:	681b      	ldr	r3, [r3, #0]
 8000570:	4a06      	ldr	r2, [pc, #24]	; (800058c <LL_PWR_SetRegulVoltageScaling+0x28>)
 8000572:	4013      	ands	r3, r2
 8000574:	0019      	movs	r1, r3
 8000576:	4b04      	ldr	r3, [pc, #16]	; (8000588 <LL_PWR_SetRegulVoltageScaling+0x24>)
 8000578:	687a      	ldr	r2, [r7, #4]
 800057a:	430a      	orrs	r2, r1
 800057c:	601a      	str	r2, [r3, #0]
}
 800057e:	46c0      	nop			; (mov r8, r8)
 8000580:	46bd      	mov	sp, r7
 8000582:	b002      	add	sp, #8
 8000584:	bd80      	pop	{r7, pc}
 8000586:	46c0      	nop			; (mov r8, r8)
 8000588:	40007000 	.word	0x40007000
 800058c:	ffffe7ff 	.word	0xffffe7ff

08000590 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000590:	b580      	push	{r7, lr}
 8000592:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_SYSCFG);
 8000594:	2001      	movs	r0, #1
 8000596:	f7ff ff99 	bl	80004cc <LL_APB2_GRP1_EnableClock>
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_PWR);
 800059a:	2380      	movs	r3, #128	; 0x80
 800059c:	055b      	lsls	r3, r3, #21
 800059e:	0018      	movs	r0, r3
 80005a0:	f7ff ff7e 	bl	80004a0 <LL_APB1_GRP1_EnableClock>

  /* SysTick_IRQn interrupt configuration */
  NVIC_SetPriority(SysTick_IRQn, 3);
 80005a4:	2301      	movs	r3, #1
 80005a6:	425b      	negs	r3, r3
 80005a8:	2103      	movs	r1, #3
 80005aa:	0018      	movs	r0, r3
 80005ac:	f7ff fe38 	bl	8000220 <__NVIC_SetPriority>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005b0:	f000 f804 	bl	80005bc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005b4:	f000 f84c 	bl	8000650 <MX_GPIO_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80005b8:	e7fe      	b.n	80005b8 <main+0x28>
	...

080005bc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005bc:	b580      	push	{r7, lr}
 80005be:	af00      	add	r7, sp, #0
  LL_FLASH_SetLatency(LL_FLASH_LATENCY_1);
 80005c0:	2001      	movs	r0, #1
 80005c2:	f7ff ffaf 	bl	8000524 <LL_FLASH_SetLatency>
  while(LL_FLASH_GetLatency()!= LL_FLASH_LATENCY_1)
 80005c6:	46c0      	nop			; (mov r8, r8)
 80005c8:	f7ff ffc0 	bl	800054c <LL_FLASH_GetLatency>
 80005cc:	0003      	movs	r3, r0
 80005ce:	2b01      	cmp	r3, #1
 80005d0:	d1fa      	bne.n	80005c8 <SystemClock_Config+0xc>
  {
  }
  LL_PWR_SetRegulVoltageScaling(LL_PWR_REGU_VOLTAGE_SCALE1);
 80005d2:	2380      	movs	r3, #128	; 0x80
 80005d4:	011b      	lsls	r3, r3, #4
 80005d6:	0018      	movs	r0, r3
 80005d8:	f7ff ffc4 	bl	8000564 <LL_PWR_SetRegulVoltageScaling>
  LL_RCC_HSI_Enable();
 80005dc:	f7ff fe8e 	bl	80002fc <LL_RCC_HSI_Enable>

   /* Wait till HSI is ready */
  while(LL_RCC_HSI_IsReady() != 1)
 80005e0:	46c0      	nop			; (mov r8, r8)
 80005e2:	f7ff fe99 	bl	8000318 <LL_RCC_HSI_IsReady>
 80005e6:	0003      	movs	r3, r0
 80005e8:	2b01      	cmp	r3, #1
 80005ea:	d1fa      	bne.n	80005e2 <SystemClock_Config+0x26>
  {

  }
  LL_RCC_HSI_SetCalibTrimming(16);
 80005ec:	2010      	movs	r0, #16
 80005ee:	f7ff fea3 	bl	8000338 <LL_RCC_HSI_SetCalibTrimming>
  LL_RCC_PLL_ConfigDomain_SYS(LL_RCC_PLLSOURCE_HSI, LL_RCC_PLL_MUL_4, LL_RCC_PLL_DIV_2);
 80005f2:	2380      	movs	r3, #128	; 0x80
 80005f4:	03da      	lsls	r2, r3, #15
 80005f6:	2380      	movs	r3, #128	; 0x80
 80005f8:	02db      	lsls	r3, r3, #11
 80005fa:	0019      	movs	r1, r3
 80005fc:	2000      	movs	r0, #0
 80005fe:	f7ff ff33 	bl	8000468 <LL_RCC_PLL_ConfigDomain_SYS>
  LL_RCC_PLL_Enable();
 8000602:	f7ff ff0f 	bl	8000424 <LL_RCC_PLL_Enable>

   /* Wait till PLL is ready */
  while(LL_RCC_PLL_IsReady() != 1)
 8000606:	46c0      	nop			; (mov r8, r8)
 8000608:	f7ff ff1a 	bl	8000440 <LL_RCC_PLL_IsReady>
 800060c:	0003      	movs	r3, r0
 800060e:	2b01      	cmp	r3, #1
 8000610:	d1fa      	bne.n	8000608 <SystemClock_Config+0x4c>
  {

  }
  LL_RCC_SetAHBPrescaler(LL_RCC_SYSCLK_DIV_1);
 8000612:	2000      	movs	r0, #0
 8000614:	f7ff fec6 	bl	80003a4 <LL_RCC_SetAHBPrescaler>
  LL_RCC_SetAPB1Prescaler(LL_RCC_APB1_DIV_1);
 8000618:	2000      	movs	r0, #0
 800061a:	f7ff fed7 	bl	80003cc <LL_RCC_SetAPB1Prescaler>
  LL_RCC_SetAPB2Prescaler(LL_RCC_APB2_DIV_1);
 800061e:	2000      	movs	r0, #0
 8000620:	f7ff feea 	bl	80003f8 <LL_RCC_SetAPB2Prescaler>
  LL_RCC_SetSysClkSource(LL_RCC_SYS_CLKSOURCE_PLL);
 8000624:	2003      	movs	r0, #3
 8000626:	f7ff fe9d 	bl	8000364 <LL_RCC_SetSysClkSource>

   /* Wait till System clock is ready */
  while(LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_PLL)
 800062a:	46c0      	nop			; (mov r8, r8)
 800062c:	f7ff feae 	bl	800038c <LL_RCC_GetSysClkSource>
 8000630:	0003      	movs	r3, r0
 8000632:	2b0c      	cmp	r3, #12
 8000634:	d1fa      	bne.n	800062c <SystemClock_Config+0x70>
  {

  }

  LL_Init1msTick(32000000);
 8000636:	4b05      	ldr	r3, [pc, #20]	; (800064c <SystemClock_Config+0x90>)
 8000638:	0018      	movs	r0, r3
 800063a:	f000 f887 	bl	800074c <LL_Init1msTick>

  LL_SetSystemCoreClock(32000000);
 800063e:	4b03      	ldr	r3, [pc, #12]	; (800064c <SystemClock_Config+0x90>)
 8000640:	0018      	movs	r0, r3
 8000642:	f000 f893 	bl	800076c <LL_SetSystemCoreClock>
}
 8000646:	46c0      	nop			; (mov r8, r8)
 8000648:	46bd      	mov	sp, r7
 800064a:	bd80      	pop	{r7, pc}
 800064c:	01e84800 	.word	0x01e84800

08000650 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000650:	b580      	push	{r7, lr}
 8000652:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  LL_IOP_GRP1_EnableClock(LL_IOP_GRP1_PERIPH_GPIOA);
 8000654:	2001      	movs	r0, #1
 8000656:	f7ff ff4f 	bl	80004f8 <LL_IOP_GRP1_EnableClock>

}
 800065a:	46c0      	nop			; (mov r8, r8)
 800065c:	46bd      	mov	sp, r7
 800065e:	bd80      	pop	{r7, pc}

08000660 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000660:	b580      	push	{r7, lr}
 8000662:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000664:	e7fe      	b.n	8000664 <NMI_Handler+0x4>

08000666 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000666:	b580      	push	{r7, lr}
 8000668:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800066a:	e7fe      	b.n	800066a <HardFault_Handler+0x4>

0800066c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800066c:	b580      	push	{r7, lr}
 800066e:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000670:	46c0      	nop			; (mov r8, r8)
 8000672:	46bd      	mov	sp, r7
 8000674:	bd80      	pop	{r7, pc}

08000676 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000676:	b580      	push	{r7, lr}
 8000678:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800067a:	46c0      	nop			; (mov r8, r8)
 800067c:	46bd      	mov	sp, r7
 800067e:	bd80      	pop	{r7, pc}

08000680 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000680:	b580      	push	{r7, lr}
 8000682:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000684:	46c0      	nop			; (mov r8, r8)
 8000686:	46bd      	mov	sp, r7
 8000688:	bd80      	pop	{r7, pc}

0800068a <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800068a:	b580      	push	{r7, lr}
 800068c:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#if defined (USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800068e:	46c0      	nop			; (mov r8, r8)
 8000690:	46bd      	mov	sp, r7
 8000692:	bd80      	pop	{r7, pc}

08000694 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
   ldr   r0, =_estack
 8000694:	4813      	ldr	r0, [pc, #76]	; (80006e4 <LoopForever+0x2>)
   mov   sp, r0          /* set stack pointer */
 8000696:	4685      	mov	sp, r0

/*Check if boot space corresponds to system memory*/

    LDR R0,=0x00000004
 8000698:	4813      	ldr	r0, [pc, #76]	; (80006e8 <LoopForever+0x6>)
    LDR R1, [R0]
 800069a:	6801      	ldr	r1, [r0, #0]
    LSRS R1, R1, #24
 800069c:	0e09      	lsrs	r1, r1, #24
    LDR R2,=0x1F
 800069e:	4a13      	ldr	r2, [pc, #76]	; (80006ec <LoopForever+0xa>)
    CMP R1, R2
 80006a0:	4291      	cmp	r1, r2
    BNE ApplicationStart
 80006a2:	d105      	bne.n	80006b0 <ApplicationStart>

 /*SYSCFG clock enable*/
    LDR R0,=0x40021034
 80006a4:	4812      	ldr	r0, [pc, #72]	; (80006f0 <LoopForever+0xe>)
    LDR R1,=0x00000001
 80006a6:	4913      	ldr	r1, [pc, #76]	; (80006f4 <LoopForever+0x12>)
    STR R1, [R0]
 80006a8:	6001      	str	r1, [r0, #0]

/*Set CFGR1 register with flash memory remap at address 0*/
    LDR R0,=0x40010000
 80006aa:	4813      	ldr	r0, [pc, #76]	; (80006f8 <LoopForever+0x16>)
    LDR R1,=0x00000000
 80006ac:	4913      	ldr	r1, [pc, #76]	; (80006fc <LoopForever+0x1a>)
    STR R1, [R0]
 80006ae:	6001      	str	r1, [r0, #0]

080006b0 <ApplicationStart>:

ApplicationStart:
/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80006b0:	4813      	ldr	r0, [pc, #76]	; (8000700 <LoopForever+0x1e>)
  ldr r1, =_edata
 80006b2:	4914      	ldr	r1, [pc, #80]	; (8000704 <LoopForever+0x22>)
  ldr r2, =_sidata
 80006b4:	4a14      	ldr	r2, [pc, #80]	; (8000708 <LoopForever+0x26>)
  movs r3, #0
 80006b6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80006b8:	e002      	b.n	80006c0 <LoopCopyDataInit>

080006ba <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80006ba:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80006bc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80006be:	3304      	adds	r3, #4

080006c0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80006c0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80006c2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80006c4:	d3f9      	bcc.n	80006ba <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80006c6:	4a11      	ldr	r2, [pc, #68]	; (800070c <LoopForever+0x2a>)
  ldr r4, =_ebss
 80006c8:	4c11      	ldr	r4, [pc, #68]	; (8000710 <LoopForever+0x2e>)
  movs r3, #0
 80006ca:	2300      	movs	r3, #0
  b LoopFillZerobss
 80006cc:	e001      	b.n	80006d2 <LoopFillZerobss>

080006ce <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80006ce:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80006d0:	3204      	adds	r2, #4

080006d2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80006d2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80006d4:	d3fb      	bcc.n	80006ce <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 80006d6:	f7ff ffd8 	bl	800068a <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80006da:	f000 f855 	bl	8000788 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80006de:	f7ff ff57 	bl	8000590 <main>

080006e2 <LoopForever>:

LoopForever:
    b LoopForever
 80006e2:	e7fe      	b.n	80006e2 <LoopForever>
   ldr   r0, =_estack
 80006e4:	20000800 	.word	0x20000800
    LDR R0,=0x00000004
 80006e8:	00000004 	.word	0x00000004
    LDR R2,=0x1F
 80006ec:	0000001f 	.word	0x0000001f
    LDR R0,=0x40021034
 80006f0:	40021034 	.word	0x40021034
    LDR R1,=0x00000001
 80006f4:	00000001 	.word	0x00000001
    LDR R0,=0x40010000
 80006f8:	40010000 	.word	0x40010000
    LDR R1,=0x00000000
 80006fc:	00000000 	.word	0x00000000
  ldr r0, =_sdata
 8000700:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000704:	20000004 	.word	0x20000004
  ldr r2, =_sidata
 8000708:	080007f0 	.word	0x080007f0
  ldr r2, =_sbss
 800070c:	20000004 	.word	0x20000004
  ldr r4, =_ebss
 8000710:	20000020 	.word	0x20000020

08000714 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000714:	e7fe      	b.n	8000714 <ADC1_COMP_IRQHandler>
	...

08000718 <LL_InitTick>:
  *         configuration by calling this function, for a delay use rather osDelay RTOS service.
  * @param  Ticks Number of ticks
  * @retval None
  */
__STATIC_INLINE void LL_InitTick(uint32_t HCLKFrequency, uint32_t Ticks)
{
 8000718:	b580      	push	{r7, lr}
 800071a:	b082      	sub	sp, #8
 800071c:	af00      	add	r7, sp, #0
 800071e:	6078      	str	r0, [r7, #4]
 8000720:	6039      	str	r1, [r7, #0]
  /* Configure the SysTick to have interrupt in 1ms time base */
  SysTick->LOAD  = (uint32_t)((HCLKFrequency / Ticks) - 1UL);  /* set reload register */
 8000722:	6839      	ldr	r1, [r7, #0]
 8000724:	6878      	ldr	r0, [r7, #4]
 8000726:	f7ff fcef 	bl	8000108 <__udivsi3>
 800072a:	0003      	movs	r3, r0
 800072c:	001a      	movs	r2, r3
 800072e:	4b06      	ldr	r3, [pc, #24]	; (8000748 <LL_InitTick+0x30>)
 8000730:	3a01      	subs	r2, #1
 8000732:	605a      	str	r2, [r3, #4]
  SysTick->VAL   = 0UL;                                       /* Load the SysTick Counter Value */
 8000734:	4b04      	ldr	r3, [pc, #16]	; (8000748 <LL_InitTick+0x30>)
 8000736:	2200      	movs	r2, #0
 8000738:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800073a:	4b03      	ldr	r3, [pc, #12]	; (8000748 <LL_InitTick+0x30>)
 800073c:	2205      	movs	r2, #5
 800073e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_ENABLE_Msk;                   /* Enable the Systick Timer */
}
 8000740:	46c0      	nop			; (mov r8, r8)
 8000742:	46bd      	mov	sp, r7
 8000744:	b002      	add	sp, #8
 8000746:	bd80      	pop	{r7, pc}
 8000748:	e000e010 	.word	0xe000e010

0800074c <LL_Init1msTick>:
  * @param  HCLKFrequency HCLK frequency in Hz
  * @note   HCLK frequency can be calculated thanks to RCC helper macro or function @ref LL_RCC_GetSystemClocksFreq
  * @retval None
  */
void LL_Init1msTick(uint32_t HCLKFrequency)
{
 800074c:	b580      	push	{r7, lr}
 800074e:	b082      	sub	sp, #8
 8000750:	af00      	add	r7, sp, #0
 8000752:	6078      	str	r0, [r7, #4]
  /* Use frequency provided in argument */
  LL_InitTick(HCLKFrequency, 1000U);
 8000754:	23fa      	movs	r3, #250	; 0xfa
 8000756:	009a      	lsls	r2, r3, #2
 8000758:	687b      	ldr	r3, [r7, #4]
 800075a:	0011      	movs	r1, r2
 800075c:	0018      	movs	r0, r3
 800075e:	f7ff ffdb 	bl	8000718 <LL_InitTick>
}
 8000762:	46c0      	nop			; (mov r8, r8)
 8000764:	46bd      	mov	sp, r7
 8000766:	b002      	add	sp, #8
 8000768:	bd80      	pop	{r7, pc}
	...

0800076c <LL_SetSystemCoreClock>:
  * @note   Variable can be calculated also through SystemCoreClockUpdate function.
  * @param  HCLKFrequency HCLK frequency in Hz (can be calculated thanks to RCC helper macro)
  * @retval None
  */
void LL_SetSystemCoreClock(uint32_t HCLKFrequency)
{
 800076c:	b580      	push	{r7, lr}
 800076e:	b082      	sub	sp, #8
 8000770:	af00      	add	r7, sp, #0
 8000772:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  SystemCoreClock = HCLKFrequency;
 8000774:	4b03      	ldr	r3, [pc, #12]	; (8000784 <LL_SetSystemCoreClock+0x18>)
 8000776:	687a      	ldr	r2, [r7, #4]
 8000778:	601a      	str	r2, [r3, #0]
}
 800077a:	46c0      	nop			; (mov r8, r8)
 800077c:	46bd      	mov	sp, r7
 800077e:	b002      	add	sp, #8
 8000780:	bd80      	pop	{r7, pc}
 8000782:	46c0      	nop			; (mov r8, r8)
 8000784:	20000000 	.word	0x20000000

08000788 <__libc_init_array>:
 8000788:	b570      	push	{r4, r5, r6, lr}
 800078a:	2600      	movs	r6, #0
 800078c:	4c0c      	ldr	r4, [pc, #48]	; (80007c0 <__libc_init_array+0x38>)
 800078e:	4d0d      	ldr	r5, [pc, #52]	; (80007c4 <__libc_init_array+0x3c>)
 8000790:	1b64      	subs	r4, r4, r5
 8000792:	10a4      	asrs	r4, r4, #2
 8000794:	42a6      	cmp	r6, r4
 8000796:	d109      	bne.n	80007ac <__libc_init_array+0x24>
 8000798:	2600      	movs	r6, #0
 800079a:	f000 f819 	bl	80007d0 <_init>
 800079e:	4c0a      	ldr	r4, [pc, #40]	; (80007c8 <__libc_init_array+0x40>)
 80007a0:	4d0a      	ldr	r5, [pc, #40]	; (80007cc <__libc_init_array+0x44>)
 80007a2:	1b64      	subs	r4, r4, r5
 80007a4:	10a4      	asrs	r4, r4, #2
 80007a6:	42a6      	cmp	r6, r4
 80007a8:	d105      	bne.n	80007b6 <__libc_init_array+0x2e>
 80007aa:	bd70      	pop	{r4, r5, r6, pc}
 80007ac:	00b3      	lsls	r3, r6, #2
 80007ae:	58eb      	ldr	r3, [r5, r3]
 80007b0:	4798      	blx	r3
 80007b2:	3601      	adds	r6, #1
 80007b4:	e7ee      	b.n	8000794 <__libc_init_array+0xc>
 80007b6:	00b3      	lsls	r3, r6, #2
 80007b8:	58eb      	ldr	r3, [r5, r3]
 80007ba:	4798      	blx	r3
 80007bc:	3601      	adds	r6, #1
 80007be:	e7f2      	b.n	80007a6 <__libc_init_array+0x1e>
 80007c0:	080007e8 	.word	0x080007e8
 80007c4:	080007e8 	.word	0x080007e8
 80007c8:	080007ec 	.word	0x080007ec
 80007cc:	080007e8 	.word	0x080007e8

080007d0 <_init>:
 80007d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80007d2:	46c0      	nop			; (mov r8, r8)
 80007d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80007d6:	bc08      	pop	{r3}
 80007d8:	469e      	mov	lr, r3
 80007da:	4770      	bx	lr

080007dc <_fini>:
 80007dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80007de:	46c0      	nop			; (mov r8, r8)
 80007e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80007e2:	bc08      	pop	{r3}
 80007e4:	469e      	mov	lr, r3
 80007e6:	4770      	bx	lr
